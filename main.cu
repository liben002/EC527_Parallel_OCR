#include "nn.hpp"
#include <iostream>
#include <time.h>
#include <cassert>

#define EPOCHS 100
#define START 700
#define END 700
#define STEP_SIZE 100

/**
 * Function to test neural network
 * @returns none
 */
static void test(int row_length) {
	// Creating network with 3 layers for "iris.csv"
	// First layer neurons must match testing params
	machine_learning::neural_network::NeuralNetwork myNN = machine_learning::neural_network::NeuralNetwork({ {785, "none"}, {row_length, "relu"}, {row_length, "sigmoid"} });

	// Printing summary of model
	myNN.summary();

	// Training Model
	myNN.fit_from_csv("mnist_cut.csv", true, EPOCHS, 0.3, false, 2, 32, true);

	printf("Testing predictions\n");
	// Testing predictions of model
	assert(machine_learning::argmax(myNN.single_predict({{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,26,215,255,222,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,28,213,253,253,221,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,117,253,253,253,163,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,34,222,253,253,253,91,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,28,199,247,253,235,68,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,29,204,253,253,253,160,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,29,204,253,253,253,165,12,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,29,204,253,253,253,235,49,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,196,253,253,253,201,40,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,110,246,253,253,253,88,1,1,1,1,1,41,27,1,1,1,1,1,1,1,1,1,1,1,1,1,1,54,241,253,253,253,103,15,1,1,102,189,189,229,215,113,1,1,1,1,1,1,1,1,1,1,1,1,1,142,246,253,253,103,15,41,150,183,195,253,253,253,253,173,1,1,1,1,1,1,1,1,1,1,1,1,78,208,253,253,194,28,150,236,253,253,253,253,253,253,253,173,1,1,1,1,1,1,1,1,1,1,1,1,178,253,253,192,100,189,253,253,253,253,253,233,253,253,253,173,1,1,1,1,1,1,1,1,1,1,1,76,202,253,253,78,139,237,253,245,190,91,97,164,253,253,241,86,1,1,1,1,1,1,1,1,1,1,1,118,253,253,253,102,239,253,253,195,57,156,174,253,253,250,142,1,1,1,1,1,1,1,1,1,1,1,1,118,253,253,253,253,253,253,253,253,253,253,253,253,253,217,1,1,1,1,1,1,1,1,1,1,1,1,1,112,253,253,253,253,253,253,253,253,253,253,246,244,156,42,1,1,1,1,1,1,1,1,1,1,1,1,1,1,238,253,253,253,253,253,253,253,253,248,97,39,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,54,176,253,253,253,253,253,152,123,35,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}})) == 6);
	assert(machine_learning::argmax(myNN.single_predict({{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,20,173,242,45,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,169,254,254,169,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,10,254,254,254,169,1,1,1,1,1,1,1,2,10,10,1,1,1,1,1,1,1,1,1,1,1,1,1,67,254,254,249,119,1,1,1,1,1,1,1,105,254,254,65,1,1,1,1,1,1,1,1,1,1,1,1,199,254,254,235,1,1,1,1,1,1,1,1,237,254,254,229,74,1,1,1,1,1,1,1,1,1,1,110,245,254,254,80,1,1,1,1,1,3,20,20,239,254,254,254,131,1,1,1,1,1,1,1,1,1,1,133,254,254,254,46,1,1,1,1,1,102,254,254,254,254,254,254,131,1,1,1,1,1,1,1,1,1,1,133,254,254,254,46,1,1,1,57,152,244,254,254,254,254,254,254,131,1,1,1,1,1,1,1,1,1,1,133,254,254,254,46,1,1,25,114,254,254,254,254,254,254,254,254,131,1,1,1,1,1,1,1,1,1,1,133,254,254,254,124,96,96,232,254,254,254,215,159,248,254,254,254,131,1,1,1,1,1,1,1,1,1,1,133,254,254,254,254,254,254,254,254,254,230,55,1,237,254,254,254,131,1,1,1,1,1,1,1,1,1,1,133,254,254,254,254,254,254,254,240,216,43,1,1,237,254,254,203,14,1,1,1,1,1,1,1,1,1,1,79,232,254,254,254,254,192,150,95,1,1,1,1,237,254,254,197,1,1,1,1,1,1,1,1,1,1,1,1,73,254,254,242,84,34,1,1,1,1,1,1,237,254,254,197,1,1,1,1,1,1,1,1,1,1,1,1,1,18,18,16,1,1,1,1,1,1,1,1,237,254,254,197,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,237,254,254,197,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,237,254,254,197,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,237,254,254,197,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,237,254,254,106,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,237,254,254,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}})) == 4);
	// assert(machine_learning::argmax(myNN.single_predict({{6.2, 3.4, 5.4, 2.3}})) == 2);
	return;
}

/**
 * @brief Main function
 * @returns 0 on exit
 */
int main() {

	double duration_table[(END-START) / STEP_SIZE + 1][2];

	for (int i = START; i <= END; i+= STEP_SIZE)
	{
		duration_table[i/100 -1][0] = i;
		printf("Starting test with row_length of %d\n", i);
		// start the timer
		auto start = std::chrono::high_resolution_clock::now();  // Start clock

		test(i);

		// stop the timer
		auto stop = std::chrono::high_resolution_clock::now();  // Stopping the clock
		auto duration = std::chrono::duration_cast<std::chrono::microseconds>(stop - start);

		printf("Time for learning over %d epochs: %f seconds\n", EPOCHS, duration.count() / 1e6);
		duration_table[i/100 -1][1] = duration.count() / 1e6;
	}

	printf("ROW_LENGTH, TIME\n");
	for (int i = 0; i < (END-START) / STEP_SIZE + 1; i++)
	{
		printf("%.3f, %.3f\n", duration_table[i][0], duration_table[i][1]);
	}

	printf("DONE");

	return 0;
}
